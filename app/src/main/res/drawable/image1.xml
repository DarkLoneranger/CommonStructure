<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#116bb8"
        android:pathData="M21,3.01H3c-1.1,0 -2,0.9 -2,2V9h2V4.99h18v14.03H3V15H1v4.01c0,1.1 0.9,1.98 2,1.98h18c1.1,0 2,-0.88 2,-1.98v-14c0,-1.11 -0.9,-2 -2,-2zM11,16l4,-4 -4,-4v3H1v2h10v3z" />
</vector>

    <!--
    右键new->vector asset选择图片，生成适量路径图片
    http://blog.csdn.net/qq_17583407/article/details/50781667
    https://www.jianshu.com/p/a3cb1e23c2c4

    M = moveto
    L = lineto
    H = horizontal lineto
    V = vertical lineto
    C = curveto
    S = smooth curveto
    Q = quadratic Belzier curve
    T = smooth quadratic Belzier curveto
    A = elliptical Arc
    Z = closepath

    移动
    M x,y (m dx, dy) 移动虚拟画笔到对应的点，但是并不绘制。一开始的时候默认是在(0,0)。

    直线
    L x,y (l dx, dy) 从当前点划一条直线到对应的点。
    H x (h dx) 从当前点绘制水平线，相当于l x,0
    V y (v dy) 从当前点绘制垂直线，相当于l 0,y

    闭合
    - **Z(或z)**  从结束点绘制一条直线到开始点，闭合路径

    弧线
    - **A rx,ry x-axis-rotation large-arc-flag,sweepflag x,y**
    - **a rx,ry x-axis-rotation large-arc-flag,sweepflag dx,dy**

    rx ry 椭圆半径
    x-axis-rotation x轴旋转角度
    large-arc-flag 为0时表示取小弧度，1时取大弧度（要长的还是短的）
    sweep-flag 0取逆时针方向，1取顺时针方向
    x,y (dx,dy) 终点的位置，相对于起点的偏移量

    例：`android:pathData="M8,10      a4,6    0      1,1     6,6"`
    红色(8,10) 是起点，
    X轴旋转的角度为0，
    取大弧，顺时针，
    蓝色(14,16) 是终点。

    二阶贝塞尔曲线
    - **Q x1,y1 x,y ( q dx1,dy1 dx,dy)**
    - **T x,y ( t dx, dy)**
    画完一条贝塞尔曲线后，只需用T指令指定终点，就能画出一条平滑的贝塞尔曲线。
    控制点被默认为上一次的控制点关于上次终点的中心对称点。比如上次的控制点P1是(6,6)，终点P2是(8,10)， 那么使用T指令后默认控制点P1`为(10,14)。

    三阶贝塞尔曲线
    - **C x1,y1 x2,y2 x,y ( c dx1,dy1 dx2,dy2 dx,dy)**
    - **S x1,y1 x,y ( s dx1,dy1 dx, dy)**
    跟二阶类似，但是三阶有两个控制点，分别是P1(x1,y1)，P2(x2,y2)还有终点P3(x,y)。类似的， c dx1,dy1 dx2,dy2 dx,dy 所有的点都是相对于P0，即上一次的终点。
    S指令跟T指令类似。S指令相对于C指令少了一个控制点，这个控制点就是上一次最后一个控制点相对上次的终点的中心对称点。
    -->
